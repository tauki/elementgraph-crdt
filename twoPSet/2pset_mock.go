// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package twoPSet

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockTwoPSet is an autogenerated mock type for the TwoPSet type
type MockTwoPSet struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *MockTwoPSet) Add(_a0 uuid.UUID, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// GetAddSet provides a mock function with given fields:
func (_m *MockTwoPSet) GetAddSet() Set {
	ret := _m.Called()

	var r0 Set
	if rf, ok := ret.Get(0).(func() Set); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Set)
		}
	}

	return r0
}

// GetRemoveSet provides a mock function with given fields:
func (_m *MockTwoPSet) GetRemoveSet() Set {
	ret := _m.Called()

	var r0 Set
	if rf, ok := ret.Get(0).(func() Set); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Set)
		}
	}

	return r0
}

// Merge provides a mock function with given fields: _a0
func (_m *MockTwoPSet) Merge(_a0 TwoPSet) {
	_m.Called(_a0)
}

// Remove provides a mock function with given fields: _a0
func (_m *MockTwoPSet) Remove(_a0 uuid.UUID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
